
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_OrgMeumeuBlingProxy_h__proxy__H__
#define __sdbuscpp__dbus_OrgMeumeuBlingProxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org
{
namespace meumeu
{
class blingdaemon_proxy
{
public:
	static constexpr const char * INTERFACE_NAME = "org.meumeu.blingdaemon";

protected:
	blingdaemon_proxy(sdbus::IProxy & proxy) : proxy_(proxy) {}

	~blingdaemon_proxy() = default;

public:
	sdbus::ObjectPath CreateImage(const std::string & image)
	{
		sdbus::ObjectPath result;
		proxy_.callMethod("CreateImage")
		        .onInterface(INTERFACE_NAME)
		        .withArguments(image)
		        .storeResultsTo(result);
		return result;
	}

	sdbus::ObjectPath CreateText(const std::string & text, const std::string & font)
	{
		sdbus::ObjectPath result;
		proxy_.callMethod("CreateText")
		        .onInterface(INTERFACE_NAME)
		        .withArguments(text, font)
		        .storeResultsTo(result);
		return result;
	}

private:
	sdbus::IProxy & proxy_;
};

} // namespace meumeu
} // namespace org

namespace org
{
namespace meumeu
{
class bling_proxy
{
public:
	static constexpr const char * INTERFACE_NAME = "org.meumeu.bling";

protected:
	bling_proxy(sdbus::IProxy & proxy) : proxy_(proxy) {}

	~bling_proxy() = default;

public:
	void AddRotate(const std::vector<sdbus::Struct<double, double>> & frames)
	{
		proxy_.callMethod("AddRotate").onInterface(INTERFACE_NAME).withArguments(frames);
	}

	void AddTranslate(const std::vector<sdbus::Struct<double, double, double>> & frames)
	{
		proxy_.callMethod("AddTranslate").onInterface(INTERFACE_NAME).withArguments(frames);
	}

	void AddScale(const std::vector<sdbus::Struct<double, double, double>> & frames)
	{
		proxy_.callMethod("AddScale").onInterface(INTERFACE_NAME).withArguments(frames);
	}

	void AddBrightness(const std::vector<sdbus::Struct<double, double>> & frames)
	{
		proxy_.callMethod("AddBrightness").onInterface(INTERFACE_NAME).withArguments(frames);
	}

	void AddAlpha(const std::vector<sdbus::Struct<double, double>> & frames)
	{
		proxy_.callMethod("AddAlpha").onInterface(INTERFACE_NAME).withArguments(frames);
	}

	void Show(const double & duration, const int32_t & zorder)
	{
		proxy_.callMethod("Show").onInterface(INTERFACE_NAME).withArguments(duration, zorder);
	}

	void Destroy()
	{
		proxy_.callMethod("Destroy").onInterface(INTERFACE_NAME);
	}

private:
	sdbus::IProxy & proxy_;
};

} // namespace meumeu
} // namespace org

#endif
