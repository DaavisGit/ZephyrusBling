
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_OrgRogcoreDaemonProxy_h__proxy__H__
#define __sdbuscpp__dbus_OrgRogcoreDaemonProxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org
{
namespace rogcore
{
class Daemon_proxy
{
public:
	static constexpr const char * INTERFACE_NAME = "org.rogcore.Daemon";

protected:
	Daemon_proxy(sdbus::IProxy & proxy) : proxy_(proxy)
	{
		proxy_.uponSignal("LedCancelEffect").onInterface(INTERFACE_NAME).call([this]() {
			this->onLedCancelEffect();
		});
	}

	~Daemon_proxy() = default;

	virtual void onLedCancelEffect() = 0;

public:
	void AnimatrixWrite(const std::vector<uint8_t> & bytearray1, const std::vector<uint8_t> & bytearray2)
	{
		proxy_.callMethod("AnimatrixWrite")
		        .onInterface(INTERFACE_NAME)
		        .withArguments(bytearray1, bytearray2)
		        .dontExpectReply();
	}

	std::string FanMode(const uint8_t & byte)
	{
		std::string result;
		proxy_.callMethod("FanMode").onInterface(INTERFACE_NAME).withArguments(byte).storeResultsTo(result);
		return result;
	}

	std::string LedWriteBytes(const std::vector<uint8_t> & bytearray)
	{
		std::string result;
		proxy_.callMethod("LedWriteBytes")
		        .onInterface(INTERFACE_NAME)
		        .withArguments(bytearray)
		        .storeResultsTo(result);
		return result;
	}

	void LedWriteEffect(const std::vector<uint8_t> & bytearray1, const std::vector<uint8_t> & bytearray2,
	                    const std::vector<uint8_t> & bytearray3, const std::vector<uint8_t> & bytearray4,
	                    const std::vector<uint8_t> & bytearray5, const std::vector<uint8_t> & bytearray6,
	                    const std::vector<uint8_t> & bytearray7, const std::vector<uint8_t> & bytearray8,
	                    const std::vector<uint8_t> & bytearray9, const std::vector<uint8_t> & bytearray10,
	                    const std::vector<uint8_t> & bytearray11)
	{
		proxy_.callMethod("LedWriteEffect")
		        .onInterface(INTERFACE_NAME)
		        .withArguments(bytearray1, bytearray2, bytearray3, bytearray4, bytearray5, bytearray6,
		                       bytearray7, bytearray8, bytearray9, bytearray10, bytearray11)
		        .dontExpectReply();
	}

	std::string LedWriteMultizone(const std::vector<uint8_t> & bytearray1, const std::vector<uint8_t> & bytearray2,
	                              const std::vector<uint8_t> & bytearray3, const std::vector<uint8_t> & bytearray4)
	{
		std::string result;
		proxy_.callMethod("LedWriteMultizone")
		        .onInterface(INTERFACE_NAME)
		        .withArguments(bytearray1, bytearray2, bytearray3, bytearray4)
		        .storeResultsTo(result);
		return result;
	}

private:
	sdbus::IProxy & proxy_;
};

} // namespace rogcore
} // namespace org

#endif
