
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__dbus_OrgMeumeuBlingAdaptor_h__adaptor__H__
#define __sdbuscpp__dbus_OrgMeumeuBlingAdaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org
{
namespace meumeu
{
class blingdaemon_adaptor
{
public:
	static constexpr const char * INTERFACE_NAME = "org.meumeu.blingdaemon";

protected:
	blingdaemon_adaptor(sdbus::IObject & object) : object_(object)
	{
		object_.registerMethod("CreateImage")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("image")
		        .withOutputParamNames("id")
		        .implementedAs([this](sdbus::Result<sdbus::ObjectPath> && result, std::string image) {
			        this->CreateImage(std::move(result), std::move(image));
		        });
		object_.registerMethod("CreateText")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("text", "font")
		        .withOutputParamNames("id")
		        .implementedAs(
		                [this](sdbus::Result<sdbus::ObjectPath> && result, std::string text, std::string font) {
			                this->CreateText(std::move(result), std::move(text), std::move(font));
		                });
		object_.registerMethod("Show")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("id", "duration", "zorder")
		        .implementedAs([this](const sdbus::ObjectPath & id, const double & duration,
		                              const int32_t & zorder) { return this->Show(id, duration, zorder); });
		object_.registerMethod("Destroy")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("id")
		        .implementedAs([this](const sdbus::ObjectPath & id) { return this->Destroy(id); });
	}

	~blingdaemon_adaptor() = default;

private:
	virtual void CreateImage(sdbus::Result<sdbus::ObjectPath> && result, std::string image) = 0;
	virtual void CreateText(sdbus::Result<sdbus::ObjectPath> && result, std::string text, std::string font) = 0;
	virtual void Show(const sdbus::ObjectPath & id, const double & duration, const int32_t & zorder) = 0;
	virtual void Destroy(const sdbus::ObjectPath & id) = 0;

private:
	sdbus::IObject & object_;
};

} // namespace meumeu
} // namespace org

namespace org
{
namespace meumeu
{
class bling_adaptor
{
public:
	static constexpr const char * INTERFACE_NAME = "org.meumeu.bling";

protected:
	bling_adaptor(sdbus::IObject & object) : object_(object)
	{
		object_.registerMethod("AddRotate")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("frames")
		        .implementedAs([this](const std::vector<sdbus::Struct<double, double>> & frames) {
			        return this->AddRotate(frames);
		        });
		object_.registerMethod("AddTranslate")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("frames")
		        .implementedAs([this](const std::vector<sdbus::Struct<double, double, double>> & frames) {
			        return this->AddTranslate(frames);
		        });
		object_.registerMethod("AddScale")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("frames")
		        .implementedAs([this](const std::vector<sdbus::Struct<double, double, double>> & frames) {
			        return this->AddScale(frames);
		        });
		object_.registerMethod("AddBrightness")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("frames")
		        .implementedAs([this](const std::vector<sdbus::Struct<double, double>> & frames) {
			        return this->AddBrightness(frames);
		        });
		object_.registerMethod("AddAlpha")
		        .onInterface(INTERFACE_NAME)
		        .withInputParamNames("frames")
		        .implementedAs([this](const std::vector<sdbus::Struct<double, double>> & frames) {
			        return this->AddAlpha(frames);
		        });
	}

	~bling_adaptor() = default;

private:
	virtual void AddRotate(const std::vector<sdbus::Struct<double, double>> & frames) = 0;
	virtual void AddTranslate(const std::vector<sdbus::Struct<double, double, double>> & frames) = 0;
	virtual void AddScale(const std::vector<sdbus::Struct<double, double, double>> & frames) = 0;
	virtual void AddBrightness(const std::vector<sdbus::Struct<double, double>> & frames) = 0;
	virtual void AddAlpha(const std::vector<sdbus::Struct<double, double>> & frames) = 0;

private:
	sdbus::IObject & object_;
};

} // namespace meumeu
} // namespace org

#endif
